function getCompoundArea(obj, area) {    if (area == null) area = 0;    if (obj.type == "path") return area + obj.getArea();    else if (obj.type == "compound" || obj.type == "group") {        var child = obj.firstChild;        while (child != null) {            area = getCompoundArea(child, area);            child = child.nextSibling;        }    }    return area;}var raster = null;var text = null;sel = getSelected();for (var i = 0; i < sel.length; i++) {    obj = sel[i];    if (raster == null && obj.type == "raster") raster = obj;    else if (text == null && obj.type == "text") text = obj;    if (raster != null && text != null) break;}if (raster != null && text != null) {    var sorted = new Array();    for (var i = 0; i < 256; i++) {        var stream = text.getStream("write");        var chr = String.fromCharCode(i);        stream.write(chr);        stream.close();        documents[0].redraw();        var obj = text.createOutlines();        var area = getCompoundArea(obj);        obj.remove();        if (area > 0) {            var info = {area: area, chr: chr};            var added = false;            for (var j = 0; j < sorted.length; j++) {                var inf = sorted[j];                if (inf.area > area) {                    sorted.splice(j, 0, info);                    added = true;                    break;                }            }            if (!added) {                 sorted[sorted.length] = info;            }        }    }    var maxArea = sorted[sorted.length - 1].area;    stream = text.getStream("write");    for (var y = 0; y < raster.height; y++) {        for (var x = 0; x < raster.width; x++) {            var col = raster.getPixel(x, y);            col.type = "gray";            var area = maxArea * col.gray;            var info = null;            for (var i = 0; i < sorted.length; i++) {                if (area <= sorted[i].area) {                    info = sorted[i];                    break;                }            }            stream.write(info.chr);        }        stream.write("\r");    }    stream.close();}